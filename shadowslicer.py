#cython: language_level=3

import os
from tkinter import filedialog
from tkinter import *
import PIL
from PIL import ImageTk
from PIL import Image

import cv2

from heightmaphelper import *
import numpy as np

path = ''
root=Tk() 
root.title("Shadow Slicer") 


FEED_XY = 800
FEED_XYFAST = 2000
FEED_ZUP = 300
FEED_ZDOWN = 250
Z_SAFE = 1
Z_CLEAR = 5

preamble = '''; Generated by ShadowSlicer
G90
G21
G92 X0 Y0 Z0
G0 Z ''' +  format(Z_CLEAR) + ' F' + format(FEED_ZUP) + '''
G0 Y %H F ''' + format(FEED_XYFAST) + '''
G0 X %W
G0 Y 0
G0 X 0
M0
M3 S24000
'''
postamble = '''
G0 Z20
M5
G0 X0 Y0 F''' + format(FEED_XYFAST) + '''
G0 Z5
'''

LeftPane = None
RightPane = None
paingroup = None
imageselector = None

SliceBtn = None
GCodeBtn = None
NumSlicesCtrl = None
slicegroup = None
buttongroup = None
optionsgroup = None
image = None
maxlayers = 10
layers = {}
tmpimages = []

inputgroup = None

widthentry = None
heightentry = None
depthentry = None

toolwidthentry = None
toolheightentry = None
toolangleentry = None

Invert = IntVar()
UpDownMode = IntVar()

def convert_for_display(img, x2):
    w = img.shape[1]
    h = img.shape[0]
    tkimage = Image.fromarray(img)
    tkimage = tkimage.resize((400 if x2 else w, 400 if x2 else h), Image.ANTIALIAS)
    tkimage = ImageTk.PhotoImage(tkimage)
    return tkimage

def create_composites():
    global layers, tmpimages
    
    alpha = 1 / (len(layers) - 1)
    beta = (1.0 - alpha) *1.0
    
    first =True
    
    for img in tmpimages:
        if first:
            left = img
            first = False
        else:
            left = cv2.addWeighted(left, beta, img, alpha, 2.5)
    
    right = cv2.bitwise_not(left)
    
    return left, right
        
def slice_darkness():
    global image, layers, tmpimages, NumSlicesCtrl, GCodeBtn, imageselector, root, slicegroup, Invert
    global inputgroup, widthentry, heightentry, depthentry, toolwidthentry, toolheightentry, toolangleentry
    htg = {}
    
    root.config(cursor="clock")
    root.update()
    
    w = int(widthentry.get())
    h = int(heightentry.get())

    newimage = cv2.resize(image, (w, h))
    print ('invert = ' + format(Invert))
    if Invert.get(): newimage = cv2.bitwise_not(newimage)
    
    colourcount(newimage, htg)
    
    maxlayers = NumSlicesCtrl.get()
        
    layers = {}

    hist = []
    print (htg)
            
    for i in range(255):
        if (format(i) in htg) and (htg[format(i)] > 10):
          #  print (format(i) + ' ' + format(htg[format(i)]))
            hist.append(i)

    for j in range(len(hist)):
        print (format(j) + ') ' + format(hist[j]) + '[' + format(htg[format(hist[j])]) + ']')
    j = 0.0
    k = 0
    l = []

    perlayer = (len(hist))/ maxlayers

    for i in range(len(hist)):           
        if j > perlayer: 
            j = 0.0
            layers[format(k)] = l
            k = k + 1
            l = []
        
        l.append(hist[i])

        j = j + 1.0
        
    if len(l) > 0: layers[format(k)] = l
        

    for i in layers:
        print (format(i) + ') ' + format(layers[format(i)])) 
    
    tmpimages = []

    for i in range(len(layers)):
        img = newimage.copy()
        update_image_from_layer(img, layers, i, 2, False) # 1 ink 2 lith
        tmpimages.append(img) 
        
    left, right = create_composites()
    
    if not imageselector is None:
        imageselector.set(1)
        imageselector.configure(to = len(tmpimages) , tickinterval = (maxlayers / 2) - 1)
  
    update_pains(left, right, True)  
    
    GCodeBtn['state'] = 'active'
           
    root.config(cursor="")
    root.update() 
    return

def cursor(pos):
    update_pains(tmpimages[(int(pos) - 1) if (int(pos) - 1) < len(tmpimages) else 0], None, True)
    
def clkimage():
    left, right = create_composites()
    update_pains(left, right, True)
    
def create_gcode():
    global imageselector, root, widthentry, heightentry, depthentry, toolwidthentry, toolheightentry, toolangleentry, UpDownMode	
   
    try:
        root.config(cursor="clock")
        root.update()
        
        w = image.shape[1]
        h = image.shape[0]
        
        ww = float(widthentry.get())
        wh = float(heightentry.get())
        wd = float(depthentry.get())
        
        gcode = addline('', preamble.replace('%W', format(ww)).replace('%H', format(wh)))
        print (gcode)
        tw = float(toolwidthentry.get())
        th = float(toolheightentry.get())
        ta = float(toolangleentry.get())
        
        zi = wd / (len(tmpimages) + 1)
        tx = np.sin(ta * (np.pi / 180))
        
        toolwidths = []
        
        for i in range(1, len(tmpimages) + 1):
            print(zi * i * tx + 0.25)
            toolwidths.append(zi * i * tx + 0.25)
          
        for q in toolwidths:
            print('tool width:' + format(q, '0.2f'))
                 
        i = 1
        z = -zi
        
        for tmp in tmpimages:
            z = -zi * i
            print ('z = ' + format (z, '0.2f'))
            imageselector.set(i)
            imageselector.update()
            gcode = generate_gcode(tmp, gcode, [FEED_XY, FEED_ZUP, FEED_ZDOWN], [Z_CLEAR, Z_SAFE, z], toolwidths[i - 1], 90/100, UpDownMode.get())
            i = i + 1
        
        gcode = addline(gcode, postamble)
        
    except Exception as e:
        print ('error: ' + repr(e))
        
    finally: 
        with open(os.path.splitext(path)[0] +'.gcode', 'w') as file:
            file.write(gcode.upper())
        
        root.config(cursor="")
        root.update()
    
def update_pains(left, right, x2):
    global LeftPane, RightPane, paingroup, imageselector, maxlevels
    
    if paingroup is None:
        paingroup = LabelFrame(root, text="Panes", padx=5, pady=5)
        
    if not left is None:
        tkleft = convert_for_display(left, x2)
        
        if imageselector is None:
            imageselector = Scale(paingroup, from_=1, to=maxlayers, tickinterval=(maxlayers / 2) - 1, orient=HORIZONTAL, command=cursor )
            imageselector.set(0)
            imageselector.pack(side="bottom", fill="x", padx=100, pady=5)
        else:
            imageselector.to = maxlayers
                  
        if LeftPane is None :
            LeftPane =  Button(paingroup, image=tkleft, command=clkimage)
            LeftPane.image = tkleft 
            LeftPane.pack(side="left", padx=10, pady=10)

        else:
            LeftPane.configure(image=tkleft)
            LeftPane.image = tkleft   
    
    if not right is None:
        tkright = convert_for_display(right, x2)
    
        if RightPane is None :
            RightPane = Label(paingroup, image=tkright)
            RightPane.image = tkright
            RightPane.pack(side="right", padx=10, pady=10)

        else:
            RightPane.configure(image=tkright)
            RightPane.image = tkright
            
    paingroup.pack(padx=10, pady=10)
        
def select_image():
    global LeftPane, RightPane, GCodeBtn, SliceBtn, NumSlicesCtrl, slicegroup, image, path, inputgroup, buttongroup
    global widthentry, heightentry, depthentry, toolwidthentry, toolheightentry, toolangleentry, optionsgroup, Invert, UpDownMode 
    
    path = filedialog.askopenfilename(initialdir = "~/Documents",title = "Select file",filetypes = (("png files","*.png"),("jpeg files","*.jpg"),("all files","*.*")))
    
    if len(path) > 0:
        image = cv2.imread(path, cv2.IMREAD_GRAYSCALE) 
        
        update_pains(image, None, False)
        
        if slicegroup is None:
            slicegroup = LabelFrame(root, text="Slice the darkness", padx=5, pady=5)
            
            if NumSlicesCtrl is None:
                group = LabelFrame(slicegroup, text="Slice Count", padx=5, pady=5)
                group.pack(side="left", expand = True, fill="x", padx=10, pady=5)
                NumSlicesCtrl = Scale(group, from_=2, to=50, tickinterval=23, orient=HORIZONTAL)
                NumSlicesCtrl.set(10)
                NumSlicesCtrl.pack(fill="both", padx=10, pady=2)
                        
            if inputgroup is None:
                inputgroup = LabelFrame(slicegroup, text="Work Size (mm)", padx=5, pady=5)
        
                Label(inputgroup, text="Width").grid(row=0)
                Label(inputgroup, text="Height").grid(row=1)
                Label(inputgroup, text="Depth").grid(row=2)
                
                Label(inputgroup, text="Tool Width").grid(column = 2, row=0)
                Label(inputgroup, text="Tool Height").grid(column = 2, row=1)
                Label(inputgroup, text="Tool Angle").grid(column = 2, row=2)
                
                widthentry = Entry(inputgroup, width = 5)
                heightentry = Entry(inputgroup, width = 5)
                depthentry = Entry(inputgroup, width = 5)

                toolwidthentry = Entry(inputgroup, width = 5)
                toolheightentry = Entry(inputgroup, width = 5)
                toolangleentry = Entry(inputgroup, width = 5)
                        
                widthentry.insert(10, '200')
                heightentry.insert(10, '200')
                depthentry.insert(10, '5')
                
                toolwidthentry.insert(10, '3')
                toolheightentry.insert(10, '15')
                toolangleentry.insert(10, '15')
                
                widthentry.grid(row=0, column=1)
                heightentry.grid(row=1, column=1)
                depthentry.grid(row=2, column=1)
                
                toolwidthentry.grid(row=0, column=3)
                toolheightentry.grid(row=1, column=3)
                toolangleentry.grid(row=2, column=3)
                       
                inputgroup.pack(side="left", padx=10, pady=1)
            
            if optionsgroup is None:
                optionsgroup = LabelFrame(slicegroup, text="Options", padx=5, pady=5)
                
                b = Checkbutton(optionsgroup, text="Inverted", variable=Invert)
                b.deselect()
                b.grid(row=0, sticky=W)
                
                b = Checkbutton(optionsgroup, text="Up Down Mode", variable=UpDownMode)
                b.select()
                b.grid(row=1, sticky=W)
                
                optionsgroup.pack(side="left", padx=10, pady=1) 
                    
            if buttongroup is None:
                buttongroup = LabelFrame(slicegroup, text="Commands", padx=5, pady=2)
                
                if SliceBtn is None:
                    SliceBtn = Button(buttongroup, text="Slice", command=slice_darkness)
                    SliceBtn.pack(side="top", fill="both", expand=True, padx="5", pady="5")
                    
                if GCodeBtn is None:
                    GCodeBtn = Button(buttongroup, text="Create GCode", command=create_gcode)
                    GCodeBtn['state'] = 'disabled'
                    GCodeBtn.pack(side="bottom", fill="both", expand=True, padx="5", pady="2")
                else:
                    GCodeBtn['state'] = 'disabled' 
                     
                buttongroup.pack(fill = 'y') 
                            
            slicegroup.pack(fill="x", padx=50, pady=1)
        
btn = Button(root, text="Select an image", command=select_image)
btn.pack(side="bottom", fill="both", expand="yes", padx="10", pady="10")

    
root.mainloop()


